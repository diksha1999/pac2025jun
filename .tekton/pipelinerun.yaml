apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: sample-pipeline-run
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[push, pull_request]"
    
    # The branch or tag we are targeting (glob pattern are supported)
    pipelinesascode.tekton.dev/on-target-branch: "[main, master]"
    
    # Fetch the git clone task from hub
    pipelinesascode.tekton.dev/task: "git-clone"
    
    # Use maven task from hub 
    # pipelinesascode.tekton.dev/task-1: "maven"
    
    # You can add more than one annotation for each task
    # pipelinesascode.tekton.dev/task-2: "[configure-result-webhook, git-clone]"
    
    # How many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "5"
    
    # User defined Tekton resource installations
    # pipelinesascode.tekton.dev/task-3: |
    #   apiVersion: tekton.dev/v1beta1
    #   kind: Task
    #   metadata:
    #     name: my-task
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events that triggered the run
    # See https://pipelinesascode.com/docs/guide/authoringprs/#dynamic-variables for reference
    - name: repo-url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineRef:
    name: sample-pipeline
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    # This workspace will inject secret to help the git-clone task to be able to
    # checkout the private repositories
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
